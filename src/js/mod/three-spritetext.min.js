// Version 1.8.2 three-spritetext - https://github.com/vasturiano/three-spritetext
!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e(require("three")):"function"==typeof define&&define.amd?define(["three"],e):(t="undefined"!=typeof globalThis?globalThis:t||self).SpriteText=e(t.THREE)}(this,(function(t){"use strict";const e="undefined"!=typeof window&&window.THREE?window.THREE:{LinearFilter:t.LinearFilter,Sprite:t.Sprite,SpriteMaterial:t.SpriteMaterial,SRGBColorSpace:t.SRGBColorSpace,Texture:t.Texture};class i extends e.Sprite{constructor(t="",i=10,o="rgba(255, 255, 255, 1)"){super(new e.SpriteMaterial),this._text=`${t}`,this._textHeight=i,this._color=o,this._backgroundColor=!1,this._padding=0,this._borderWidth=0,this._borderRadius=0,this._borderColor="white",this._strokeWidth=0,this._strokeColor="white",this._fontFace="system-ui",this._fontSize=90,this._fontWeight="normal",this._canvas=document.createElement("canvas"),this._genCanvas()}get text(){return this._text}set text(t){this._text=t,this._genCanvas()}get textHeight(){return this._textHeight}set textHeight(t){this._textHeight=t,this._genCanvas()}get color(){return this._color}set color(t){this._color=t,this._genCanvas()}get backgroundColor(){return this._backgroundColor}set backgroundColor(t){this._backgroundColor=t,this._genCanvas()}get padding(){return this._padding}set padding(t){this._padding=t,this._genCanvas()}get borderWidth(){return this._borderWidth}set borderWidth(t){this._borderWidth=t,this._genCanvas()}get borderRadius(){return this._borderRadius}set borderRadius(t){this._borderRadius=t,this._genCanvas()}get borderColor(){return this._borderColor}set borderColor(t){this._borderColor=t,this._genCanvas()}get fontFace(){return this._fontFace}set fontFace(t){this._fontFace=t,this._genCanvas()}get fontSize(){return this._fontSize}set fontSize(t){this._fontSize=t,this._genCanvas()}get fontWeight(){return this._fontWeight}set fontWeight(t){this._fontWeight=t,this._genCanvas()}get strokeWidth(){return this._strokeWidth}set strokeWidth(t){this._strokeWidth=t,this._genCanvas()}get strokeColor(){return this._strokeColor}set strokeColor(t){this._strokeColor=t,this._genCanvas()}_genCanvas(){const t=this._canvas,i=t.getContext("2d"),o=Array.isArray(this.borderWidth)?this.borderWidth:[this.borderWidth,this.borderWidth],r=o.map((t=>t*this.fontSize*.1)),h=(Array.isArray(this.borderRadius)?this.borderRadius:[this.borderRadius,this.borderRadius,this.borderRadius,this.borderRadius]).map((t=>t*this.fontSize*.1)),s=Array.isArray(this.padding)?this.padding:[this.padding,this.padding],n=s.map((t=>t*this.fontSize*.1)),a=this.text.split("\n"),d=`${this.fontWeight} ${this.fontSize}px ${this.fontFace}`;i.font=d;const l=Math.max(...a.map((t=>i.measureText(t).width))),g=this.fontSize*a.length;if(t.width=l+2*r[0]+2*n[0],t.height=g+2*r[1]+2*n[1],this.borderWidth){if(i.strokeStyle=this.borderColor,r[0]){const e=r[0]/2;i.lineWidth=r[0],i.beginPath(),i.moveTo(e,h[0]),i.lineTo(e,t.height-h[3]),i.moveTo(t.width-e,h[1]),i.lineTo(t.width-e,t.height-h[2]),i.stroke()}if(r[1]){const e=r[1]/2;i.lineWidth=r[1],i.beginPath(),i.moveTo(Math.max(r[0],h[0]),e),i.lineTo(t.width-Math.max(r[0],h[1]),e),i.moveTo(Math.max(r[0],h[3]),t.height-e),i.lineTo(t.width-Math.max(r[0],h[2]),t.height-e),i.stroke()}if(this.borderRadius){const e=Math.max(...r),o=e/2;i.lineWidth=e,i.beginPath(),[!!h[0]&&[h[0],o,o,h[0]],!!h[1]&&[t.width-h[1],t.width-o,o,h[1]],!!h[2]&&[t.width-h[2],t.width-o,t.height-o,t.height-h[2]],!!h[3]&&[h[3],o,t.height-o,t.height-h[3]]].filter((t=>t)).forEach((([t,e,o,r])=>{i.moveTo(t,o),i.quadraticCurveTo(e,o,e,r)})),i.stroke()}}this.backgroundColor&&(i.fillStyle=this.backgroundColor,this.borderRadius?(i.beginPath(),i.moveTo(r[0],h[0]),[[r[0],h[0],t.width-h[1],r[1],r[1],r[1]],[t.width-r[0],t.width-r[0],t.width-r[0],r[1],h[1],t.height-h[2]],[t.width-r[0],t.width-h[2],h[3],t.height-r[1],t.height-r[1],t.height-r[1]],[r[0],r[0],r[0],t.height-r[1],t.height-h[3],h[0]]].forEach((([t,e,o,r,h,s])=>{i.quadraticCurveTo(t,r,e,h),i.lineTo(o,s)})),i.closePath(),i.fill()):i.fillRect(r[0],r[1],t.width-2*r[0],t.height-2*r[1])),i.translate(...r),i.translate(...n),i.font=d,i.fillStyle=this.color,i.textBaseline="bottom";const c=this.strokeWidth>0;c&&(i.lineWidth=this.strokeWidth*this.fontSize/10,i.strokeStyle=this.strokeColor),a.forEach(((t,e)=>{const o=(l-i.measureText(t).width)/2,r=(e+1)*this.fontSize;c&&i.strokeText(t,o,r),i.fillText(t,o,r)})),this.material.map&&this.material.map.dispose();const u=this.material.map=new e.Texture(t);u.minFilter=e.LinearFilter,u.colorSpace=e.SRGBColorSpace,u.needsUpdate=!0;const f=this.textHeight*a.length+2*o[1]+2*s[1];this.scale.set(f*t.width/t.height,f,0)}clone(){return new this.constructor(this.text,this.textHeight,this.color).copy(this)}copy(t){return e.Sprite.prototype.copy.call(this,t),this.color=t.color,this.backgroundColor=t.backgroundColor,this.padding=t.padding,this.borderWidth=t.borderWidth,this.borderColor=t.borderColor,this.fontFace=t.fontFace,this.fontSize=t.fontSize,this.fontWeight=t.fontWeight,this.strokeWidth=t.strokeWidth,this.strokeColor=t.strokeColor,this}}return i}));
